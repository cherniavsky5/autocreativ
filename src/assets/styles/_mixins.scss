@use "sass:math";
@use "sass:meta";
@use "sass:list";

//@function vw($value, $base: 1920px) {
//  @return calc(#{math.div($value, $base) * 100vw} );
//}

$base-font-sizes: (
  default: 14px,
  md: 16px,
  lg: 20px
);

@function rem($value, $breakpoint: default) {
  $base-size: map-get($base-font-sizes, $breakpoint);
  @return math.div($value, $base-size) * 1rem;
}

//@function rem($value) {
//  @return math.div($value, var(--base-font-size)) * 1rem;
//}

@mixin grid-container($gap: 1rem) {
  display: flex;
  flex-wrap: wrap;
  margin-left: -(math.div($gap, 2));
  margin-right: -(math.div($gap, 2));
}

@mixin grid-item($columns: 1, $grid: 12) {
  flex: 0 0 calc(100% / $grid * $columns);
  padding-left: math.div(1rem, 2);
  padding-right: math.div(1rem, 2);
}

$breakpoints: (
  sm: 576px,  // Телефоны
  md: 768px,  // Планшеты
  lg: 992px,  // Ноутбуки
  xl: 1200px, // Десктопы
  xxl: 1400px // Большие экраны
);

@mixin breakpoint($size, $type: min) {
  $breakpoint: map-get($breakpoints, $size);

  @if $breakpoint {
    @if $type == max {  // Mobile-First (max-width)
      @media (max-width: $breakpoint) { @content; }
    } @else if $type == min {  // Desktop-First (min-width)
      @media (min-width: $breakpoint) { @content; }
    }
  } @else {
    @warn "Breakpoint #{$size} не найден в карте $breakpoints.";
  }
}